* Introduction

This is my emacs configuration written, as a .org file. It will be tangled as
=.spacemacs= into my home directory.

* Package Installation

#+BEGIN_SRC emacs-lisp
(defun dotspacemacs/layers ()
  (setq-default
 
#+END_SRC

#+BEGIN_SRC emacs-lisp

   dotspacemacs-configuration-layers
   '(python
     markdown
     helm
     auto-completion
     better-defaults
     emacs-lisp
     git
     markdown
     neotree
     org
     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom)
     spell-checking
     syntax-checking
     version-control
     javascript
     )

   dotspacemacs-additional-packages
   '(smart-dash
     )
#+END_SRC

#+BEGIN_SRC emacs-lisp
))  ;; end dotspacemacs/layers

(defun dotspacemacs/init ()
 (setq custom-file "~/.emacs.d/custom.el")

(setq-default dotspacemacs-startup-lists '((recents . 5)
                                           (projects . 7)))

;; Disable auto save.
(setq-default dotspacemacs-auto-save-file-location 'nil)

;; Delete trailing whitespace on changed lines on save.
(setq-default dotspacemacs-whitespace-cleanup nil)

;; use unix style line endings for every new file by default
(setq-default buffer-file-coding-system 'utf-8-unix)

;; Sentences in text and docstring end with a single space, let fill-paragh do it's job.
(setq sentence-end-double-space nil)
(setq colon-double-space nil)

;; Always sort lines case-insensitive
(setq sort-fold-case t)

;; configure spell checking
(setenv "LANG" "en_GB")

#+END_SRC

** UI And Interaction
#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-default-font '("Hack"
                                          ;; :size 13
                                          :weight normal
                                          :width normal))
#+END_SRC

Display visited file's path in frame title

#+BEGIN_SRC emacs-lisp
(setq-default dotspacemacs-frame-title-format "%f")
#+END_SRC


#+BEGIN_SRC emacs-lisp
)

(defun dotspacemacs/config ()

#+END_SRC

* Mode Setup


** Maxscript Mode

My custom MAXScript mode for 3dsMax and the python side of it. Should
be available in the lisp folder as a git repo or submodule.

Only works on Windows anyway.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/maxscript-mode/")
  (autoload 'maxscript-mode "maxscript-mode" "maxscript-mode" t)
  (setq auto-mode-alist (append '(("\.ms$" . maxscript-mode)) auto-mode-alist))

  (add-hook
   'maxscript-mode-hook
   (lambda ()
     (require 'send-to-max)
     (local-set-key [S-return] 'maxscript-send-line-or-region)
     (local-set-key (kbd "C-c C-e") 'maxscript-send-file)
     (local-set-key (kbd "C-c C-c") 'maxscript-send-buffer)
     (local-set-key (kbd "C-c C-d") 'maxscript-clear-output)
     (fci-mode)
     (whitespace-mode)
     (require 'smart-dash)
     (smart-dash-mode)))
  (add-hook 'maxscript-mode-hook 'set-newline-and-indent)
  ;; max-python stuff
  (add-hook
   'python-mode-hook
   (lambda ()
     (require 'send-to-max)
     (local-set-key [S-return] 'maxscript-send-line-or-region-py)
     (local-set-key (kbd "C-c C-e") 'maxscript-send-file)))
#+END_SRC

** JavaScript And Related Web-Dev Modes

#+BEGIN_SRC emacs-lisp
;; Don't indent continung expressions like dot-chaining.
(setq js-expr-indent-offset -2)
(setq js-indent-level 2)
(setq js2-basic-offset 2)
(setq js2-strict-trailing-comma-warning nil)

(setq css-indent-offset 2)

(setq web-mode-attr-indent-offset nil)
(setq web-mode-code-indent-offset 2)
(setq web-mode-markup-indent-offset 2)


(add-hook 'js2-mode-hook
	  (lambda ()
	    (setq indent-tabs-mode nil)
	    (highlight-parentheses-mode t)
	    (fci-mode t)  
	    (highlight-indentation-mode t)
	    (flycheck-mode t)
	    ))

(add-hook 'json-mode-hook 
    (lambda ()
      (setq indent-tabs-mode nil)
			(highlight-parentheses-mode t)
      (make-local-variable 'js-indent-level)
      (setq js-indent-level 4)))

(add-hook 'css-mode-hook
	  (lambda ()
	    (setq indent-tabs-mode nil)
	    (highlight-indentation-mode t)
	    ))

(add-hook 'html-mode-hook
	  (lambda ()
	    (setq tab-width 2)
	    (setq indent-tabs-mode nil)
	    (highlight-indentation-mode t)
	    ))

;; highlight indent mode issue, see
;; https://github.com/antonj/Highlight-Indentation-for-Emacs/pull/27
(defvar web-mode-html-offset) 
(add-hook 'web-mode-hook
	  (lambda ()
	    (rainbow-mode t)
	    (setq-default tab-width 2)
	    (setq-default indent-tabs-mode nil)
      (highlight-indentation-mode t)
	    ))

(require 'sgml-mode)
(require 'nxml-mode)
(setq rng-nxml-auto-validate-flag nil)

(add-to-list 'hs-special-modes-alist
             '(nxml-mode
               "<!--\\|<[^/>]*[^/]>"
               "-->\\|</[^/>]*[^/]>"

               "<!--"
               sgml-skip-tag-forward
               nil))
(add-hook 'nxml-mode-hook
	  (lambda ()
	    (hs-minor-mode)
	    ;; (hideshowvis-enable)
		(show-smartparens-mode nil)
		(smartparens-mode nil)
		(turn-off-show-smartparens-mode)))


#+END_SRC
** C-modes

#+BEGIN_SRC emacs-lisp
(setq c-basic-offset 4)
(setq c-indent-level 4)
(c-set-offset 'substatement-open 0)
(c-set-offset 'inline-open 0)

(add-hook 'c-mode-common-hook ; for c++, c and obj-c
	  (lambda ()
		(c-set-offset 'substatement-open 0)
	    (setq indent-tabs-mode t) ; indent with tabs, not spaces
	    (setq tab-width 4) ; a tab is 4 spaces wide
	    (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))
	    ;; (hideshowvis-enable)
	    (fci-mode)
	    (setq truncate-lines t)))
(add-hook 'csharp-mode-hook
	  (lambda ()
	    (setq c-basic-offset 4)))

#+END_SRC

** Other Prog Modes

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/progmode/")

(autoload 'cg-mode "cg-mode" "Cg editing mode." t)
(autoload 'mel-mode "mel-mode" "Mel editing mode." t)
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(autoload 'rsl-mode "rsl-mode" "RenderMan Shading Language editing mode" t)
(autoload 'rib-mode "rib-mode" "RenderMan Interface Bytestream editing mode" t)

;; Load specific file extensions with a appropriate mode
(setq auto-mode-alist
     (append '(("\\.cs$" . csharp-mode)
               ("\\.cg$" . cg-mode)
               ("\\.hlsl$" . cg-mode)
               ("\\.fxh?$" . cg-mode)
               ("\\.sl$" . rsl-mode)
               ("\\.rib$" . rib-mode)
               ("\\.ma$" . mel-mode)
               ("\\.mel$" . mel-mode)
			         ("\\.h$" . c++-mode)
			         ("\\.inl$" . c++-mode)
			         ("\\.html$" . web-mode))
             auto-mode-alist))

#+END_SRC

Maya MEL and Python integration

#+BEGIN_SRC emacs-lisp
;; etom stuff mel
(add-hook
 'mel-mode-hook
 (lambda ()
   (require 'etom)
   (setq etom-default-host "localhost")
   (setq etom-default-port 2222)
   (local-set-key (kbd "C-c C-r") 'etom-send-region)
   (local-set-key (kbd "C-c C-c") 'etom-send-buffer)
   (local-set-key (kbd "C-c C-l") 'etom-send-buffer)
   (local-set-key (kbd "C-c C-z") 'etom-show-buffer)))
;; etom stuff python
(add-hook
 'python-mode-hook
 (lambda ()
   (require 'etom)
   (setq etom-default-host "localhost")
   (setq etom-default-port 2222)
   (local-set-key (kbd "C-c C-m C-r") 'etom-send-region-py)
   (local-set-key (kbd "C-c C-m C-c") 'etom-send-buffer-py)
   (local-set-key (kbd "C-c C-m C-l") 'etom-send-buffer-py)
   (local-set-key (kbd "C-c C-m C-z") 'etom-show-buffer)))

#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp
  ;; Toggleable auto-export to html in org mode on save
  (defun toggle-org-html-export-on-save ()
    (interactive)
    (if (memq 'org-html-export-to-html after-save-hook)
        (progn
          (remove-hook 'after-save-hook 'org-html-export-to-html t)
          (message "Disabled org html export on save for current buffer..."))
      (add-hook 'after-save-hook 'org-html-export-to-html nil t)
      (message "Enabled org html export on save for current buffer...")))

  ;; Auto-pair commonly used enclosing markers in org-mode with smartparens
  (sp-with-modes 'org-mode
    (sp-local-pair "~" "~" :actions '(wrap))
    (sp-local-pair "*" "*" :actions '(wrap))
    (sp-local-pair "/" "/" :actions '(wrap)))

  ;; Additional expansion templates for org-mode
  (eval-after-load 'org
  '(progn
     (add-to-list 'org-structure-template-alist '("py" "#+begin_src python\n?\n#+end_src" ""))
     (add-to-list 'org-structure-template-alist '("el" "#+begin_src emacs-lisp\n?\n#+end_src" ""))
  ))

  ;; Syntax-highlight code in code-blocks
  (setq org-src-fontify-natively t)
  ;; don't indent source code
  (setq org-edit-src-content-indentation 0)
  ;; preserve the indentation inside of source blocks
  (setq org-adapt-indentation nil)
  ;; Make TAB act as if it were issued in a buffer of the languageâ€™s major mode.
  (setq org-src-tab-acts-natively t)
  ;; When editing a code snippet, use the current window rather than
  ;; popping open a new one (which shows the same information).
  (setq org-src-window-setup 'current-window)
#+END_SRC
     
* General Functionality

#+END_SRC

** Text Interaction

#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)

(defadvice kill-region (before slick-copy activate compile)
  "When called interactively with no active region, cut the current line."
  (interactive
   (if mark-active
       (list (region-beginning) (region-end))
     (progn
       (list (line-beginning-position) (line-beginning-position 2)) ) ) ))


(defun reindent-whole-buffer-python ()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))


(defun reindent-whole-buffer-cc ()
  "indent whole buffer"
  (interactive)
  (save-excursion
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)))

#+END_SRC


* General Keyboard Settings

** Modify Other Modes

When exiting i-search with C-<return>, place cursor at the front
of the match.

#+BEGIN_SRC emacs-lisp
(define-key isearch-mode-map [(control return)]
  #'isearch-exit-other-end)
(defun isearch-exit-other-end ()
  "Exit isearch, at the opposite end of the string."
  (interactive)
  (isearch-exit)
  (goto-char isearch-other-end))
#+END_SRC

Make backspace in isearch delete chars, not cycle backwards.

#+BEGIN_SRC emacs-lisp
(define-key isearch-mode-map [remap isearch-delete-char] 'isearch-del-char)
#+END_SRC

* General Configuration

** General Settings

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'windows-nt)
  (setq-default ispell-program-name "c:/tools/hunspell/bin/hunspell.exe"))

(with-eval-after-load "ispell"
  (setq ispell-really-hunspell t)
  (setq ispell-program-name "hunspell")
  (setq ispell-dictionary "en_GB")
  ;; ispell-set-spellchecker-params has to be called
  ;; before ispell-hunspell-add-multi-dic will work
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "en_GB"))

#+END_SRC

*** Global Modes

#+BEGIN_SRC emacs-lisp
(setq projectile-globally-ignored-file-suffixes (quote ("pyc")))
(setq projectile-indexing-method (quote alien))
#+END_SRC

** General Mac-Specific Settings

Use command as meta.

#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'meta)
(setq ns-right-command-modifier 'control) ;; make right command act as control
(global-set-key [kp-delete] 'delete-char) ;; set fn-delete to be right-delete
(global-set-key (kbd "M-`") 'ns-next-frame)
#+END_SRC

Setup for latex.

#+BEGIN_SRC emacs-lisp
(when (equal system-type 'darwin) 
 (progn
  (setenv "PATH" (concat (getenv "PATH") ":/usr/texbin"))
  (setq exec-path (append exec-path '("/usr/texbin")))))
#+END_SRC

When starting emacs with GUI, it doesn't have access to what's
commonly available in a shell, because the PATHs differ, so we copy
the PATH from a shell to the current environment.

#+BEGIN_SRC emacs-lisp
(defun set-exec-path-from-shell-PATH ()
  (let ((path-from-shell 
      (replace-regexp-in-string "[[:space:]\n]*$" "" 
        (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))
(when (equal system-type 'darwin) (set-exec-path-from-shell-PATH))
#+END_SRC

Don't open new window when drag-dropping a file.

#+BEGIN_SRC emacs-lisp
(setq ns-pop-up-frames nil)
#+END_SRC

Don't show popup dialogs as they tend to crash emacs on OSX currently.

#+BEGIN_SRC emacs-lisp
(defadvice yes-or-no-p (around prevent-dialog activate)
  "Prevent yes-or-no-p from activating a dialog"
  (let ((use-dialog-box nil))
    ad-do-it))
(defadvice y-or-n-p (around prevent-dialog-yorn activate)
  "Prevent y-or-n-p from activating a dialog"
  (let ((use-dialog-box nil))
    ad-do-it))
(defadvice message-box (around prevent-dialog activate) 
  "Prevent message-box from activating a dialog" 
  (apply #'message 
	 (ad-get-args 0))) 
#+END_SRC

** General Windows-Specific Settings

Suppress ".emacs.d/server is unsafe" error on windows.

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'windows-nt)
  (defun server-ensure-safe-dir (dir) "Noop" t) 
  (unless (server-running-p)
    (server-start))
)
#+END_SRC

Use the git-bash for shell mode.

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'windows-nt)
  (progn 
    (setq explicit-shell-file-name
          "C:/Program Files/Git/bin/sh.exe")
    (setq shell-file-name explicit-shell-file-name)
    (add-to-list 'exec-path "C:/Program Files/Git/bin/")
  ))
#+END_SRC

** General Text And Programming Settings

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
#+END_SRC

#+BEGIN_SRC emacs-lisp
)  ;; end dotspacemacs/init

#+END_SRC
